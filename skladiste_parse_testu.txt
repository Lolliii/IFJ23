//_______________TODO LIST___________

        // neprochází funkce s ??
        ???? str = funkce() ?? 123

        // epression parser chyba, nebere 2 leve zavorky
        var id = ((d))

//________ END TODO LIST ___________



// ___ kombinace vseho____
        func void2(){
            return
        }
        var a = 2
    adsfS()

    a= asd * DSa / ASD + 243.3

while let id{

    var s : String?

}

func bar(with param : String) -> String {
    let r : String = foo(param)
    return r
}
func foo(_ par : String) -> String {
    let ret = bar(with: par)
return ret }
bar(with: "ahoj")


  func concat(_ x : String, with y : String) -> String {
      let x = x + y
      return x + " " + y
  }
  let a = "ahoj "
  var ct : String
  ct = concat(a, with: "svete")
  write(ct, a)

func readString() -> String? {}func readInt() -> Int?{}
func readDouble() -> Double?{}

// Program 1: Vypocet faktorialu (iterativne)
/* Hlavni telo programu */
write("Zadejte cislo pro vypocet faktorialu\n")
let a : Int? = readInt()
if let a {
        if (a < 0) {write("Faktorial nelze spocitat\n")
        } else {
} } else {
}
var a = Int2Double(a)
var vysl : Double = 1
while (a > 0) {
vysl = vysl * a a=a-1
}
write("Vysledek je: ", vysl, "\n")
write("Chyba pri nacitani celeho cisla!\n")


/* Program 3: Prace s retezci a vestavenymi funkcemi */
var str1 = "Toto je nejaky text v programu jazyka IFJ23"
let str2 = str1 + ", ktery jeste trochu obohatime"
write(str1, "\n", str2, "\n")
let i = length(str1)
write("Pozice retezce \"text\" v str2: ", i, "\n")
write("Zadejte serazenou posloupnost vsech malych pismen a-h, ")
let newInput = readString()
if let newInput {
        str1 = newInput
        while (str1 != "abcdefgh") {
                write("Spatne zadana posloupnost, zkuste znovu:\n")
                str1 = "" ?? readString
} }else{}


// Program 2: Vypocet faktorialu (rekurzivne)
// Hlavni telo programu
write("Zadejte cislo pro vypocet faktorialu: ")
let inp = readInt()
// pomocna funkce pro dekrementaci celeho cisla o zadane cislo
func decrement(of n: Int, by m: Int) -> Int {
        return n - m
}
// Definice funkce pro vypocet hodnoty faktorialu
func factorial(_ n : Int) -> Int {
        var result : Int?
}
if (n < 2) {
        result = 1
} else {
        let decremented_n = decrement(of: n, by: 1)
        let temp_result = factorial(decremented_n)
        result = n * temp_result
}
return result!
// pokracovani hlavniho tela programu
if let inp {
        if (inp < 0)    { // Pokracovani hlavniho tela programu
                write("Faktorial nelze spocitat!")
        } else {
let vysl = factorial(inp)

} 

        write("Vysledek je: ", vysl)
        } else {
write("Chyba pri nacitani celeho cisla!")
}


// toto nam funguje
//____________________ volani void funkce

        voidfunkce1()
    funkce(
    
)
        da(fasdf)
ASFS( "asdf", nil, 123, 3454.4)

// ________________ přiřazení do id
        let x = 
        x + y 

var a = fknk()
var b : Int = 12
var c = x + b
let saf= 234* 234.23
a = d
   var ds=    voidfunkce1()
           c = 123432
        d= a

let a = sdf("sdS")


// Program 2: Vypocet faktorialu (rekurzivne)
// Hlavni telo programu
write("Zadejte cislo pro vypocet faktorialu: ")
let inp = readInt()
// pomocna funkce pro dekrementaci celeho cisla o zadane cislo
func decrement(of n: Int, by m: Int) -> Int {
        return n - m
}
// Definice funkce pro vypocet hodnoty faktorialu
func factorial(_ n : Int) -> Int {
        var result : Int?
}
if (n < 2) {
        result = 1
} else {
        let decremented_n = decrement(of: n, by: 1)
        let temp_result = factorial(decremented_n)
        result = n * temp_result
}
return result!


// pokracovani hlavniho tela programu
if let inp {
        if (inp < 0)    { // Pokracovani hlavniho tela programu
                write("Faktorial nelze spocitat!")
        } else {
let vysl = factorial(inp)
        }}else{}

//________________prazdny program

//EOF

//________________let deklarace

let id1 : String
let      id2 : String?
let id3 :     Int
let id4 :
 Int?
let id5
 : Double
let 
id6 : Double?

//________________ let definice

let id1 : String = "ahoj"
let      id2 : String? = "ASD saddsad dsa"
let id3 :     Int = 23432
let id4 :
 Int? = 432
let id5
 : Double = 234.32
let 
id6 : Double? = nil

let id7 = "ahoj"
let      id8 = "ASD saddsad dsa"
let id9 = 23432
let id10 = 432
let id11
  = 234.32

//________________var deklarace

var id1 : String
var      id2 : String?
var id3 :     Int
var id4 :
 Int?
var id5
 : Double
var 
id6 : Double?

//________________var definice

var id1 : String = "ahoj"
var      id2 : String? = "ASD saddsad dsa"
var id3 :     Int = 23432
var id4 :
 Int? = 432
var id5
 : Double = 234.32
var 
id6 : Double? = nil

var id7 = "ahoj"
var      id8 = "ASD saddsad dsa"
var id9 = 23432
var id10 = 432
var id11
  = 234.32


if (
    43<=id
    ){}else{}
//________________if else

if let a {

}else{

}

if (2){

}else{

}

if let
a 
{

}
else{}

if 242-132{

}else{

}

if 123+13 -
 55 >= 12{}else{}

if (34230 == 4-1+3*id){

}else{}

if (
    42 != a
    ){}else{}

if "as" == "jj" {

}else{}


//________________while funkce

while let a{

}

while "asd"
{}

while a{

}

while( a < 2){}

while(1-2){
}

while 22==3{}

while 2-f+4{}

while f{}

while 2 < 3{}

while l >= 3{

}

while (f){}
while(f>= h){}

while
(
    asdf
    +
    afd
){}

while(432+3239236232/f*32 < 5){}

//________________func deklarace


func void1(){
}
func fid1 (_ x : String, with y : String) -> String {
    let x = 2 + y
    return x + y
}
func fid2 (_ x : Int, with y : String?)    {
    let x = "sad" + y
    return x
}
func fid3 (dasd x : Int?, with y : String) {
    return 
}
func fid4 () -> String {
    let x = 234.234 + y
    return x
}